====
    This file is part of FoxelLog.

    FoxelLog is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    FoxelLog is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with FoxelLog.  If not, see <http://www.gnu.org/licenses/>.
====

State:
    0 = in place
    1 = attempted rollback
    2 = gone
    3 = attempted redo

Rollback
====================================================================================
Get all matching documents, sorted by date desc, set state = 1, put into rollback map {key = location}
Make empty rollback set
Make empty change map {key = location, value = toBlock}
For every location
    a) Check for any newer changes on the location with state == 0. If found, remove all blocks with location from rollback set
    b) Chain down from current.blockFrom -> next.blockTo of current set of blocks
    c) If the chain terminates, get blocks with state != 0 at same location to continue chain, if any found, append to current set of blocks, return to (b), otherwise do (d)
    d) End loop, add chain to rollback set and end to change map
For the entire rollback set, set state = 2
For entire change map, perform changes

Redo
====================================================================================
Get all matching documents, sorted by date desc, set state = 3, put into redo map {key = location}
Make empty redo set
Make empty change map {key = location, value = toBlock}
For every location
    a) Check for any newer changes on the location with state == 3. If found, remove all blocks with location from redo set
    b) Chain down from current.blockFrom -> next.blockTo of current set of blocks
    c) If the chain terminates, get blocks with state == 3 at same location to continue chain, if any found, append to current set of blocks, return to (b), otherwise do (d)
    d) End loop, add chain to redo set and end to change map
For the entire redo set, set state = 0
For entire change map, perform changes
